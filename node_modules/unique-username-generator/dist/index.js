"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.nouns = exports.adjectives = exports.uniqueUsernameGenerator = exports.generateUsername = exports.generateFromEmail = void 0;
const data_1 = require("./data");
const crypto = require("crypto");
const getRandomInt = (min, max) => {
    const randomBuffer = new Uint32Array(1);
    window.crypto.getRandomValues(randomBuffer);
    const randomNumber = randomBuffer[0] / (0xffffffff + 1);
    return (randomNumber * (max - min)) + min;
};
const randomNumber = (maxNumber) => {
    let randomNumberString;
    switch (maxNumber) {
        case 1:
            randomNumberString = crypto.randomInt(1, 9).toString();
            break;
        case 2:
            randomNumberString = crypto.randomInt(10, 90).toString();
            break;
        case 3:
            randomNumberString = crypto.randomInt(100, 900).toString();
            break;
        case 4:
            randomNumberString = crypto.randomInt(1000, 9000).toString();
            break;
        case 5:
            randomNumberString = crypto.randomInt(10000, 90000).toString();
            break;
        case 6:
            randomNumberString = crypto.randomInt(100000, 900000).toString();
            break;
        default:
            randomNumberString = "";
            break;
    }
    return randomNumberString;
};
function generateFromEmail(email, randomDigits) {
    // Retrieve name from email address
    const nameParts = email.replace(/@.+/, "");
    // Replace all special characters like "@ . _ ";
    const name = nameParts.replace(/[&/\\#,+()$~%._@'":*?<>{}]/g, "");
    // Create and return unique username
    return name + randomNumber(randomDigits);
}
exports.generateFromEmail = generateFromEmail;
function generateUsername(separator, randomDigits, length) {
    const noun = data_1.nouns[Math.floor(Math.random() * data_1.nouns.length)];
    const adjective = data_1.adjectives[Math.floor(Math.random() * data_1.adjectives.length)];
    let username;
    // Create unique username
    if (separator) {
        username = adjective + separator + noun + randomNumber(randomDigits);
    }
    else {
        username = adjective + noun + randomNumber(randomDigits);
    }
    if (length) {
        return username.substring(0, length);
    }
    return username;
}
exports.generateUsername = generateUsername;
function uniqueUsernameGenerator(config) {
    if (!config.dictionaries) {
        throw new Error("Cannot find any dictionary. Please provide at least one, or leave " +
            "the 'dictionary' field empty in the config object");
    }
    else {
        const dictionariesLength = config.dictionaries.length;
        let name = "";
        for (let i = 0; i < dictionariesLength; i++) {
            if (name && config.separator) {
                if (config.separator) {
                    name = name + config.separator + config.dictionaries[i][Math.floor(getRandomInt(0, 1) * config.dictionaries[i].length)];
                }
                else {
                    name = name + config.dictionaries[i][Math.floor(getRandomInt(0, 1) * config.dictionaries[i].length)];
                }
            }
            else {
                name = config.dictionaries[i][Math.floor(getRandomInt(0, 1) * config.dictionaries[i].length)];
            }
        }
        let username = name + randomNumber(config.randomDigits);
        username = username.toLowerCase();
        if (config.style === "lowerCase") {
            username = username.toLowerCase();
        }
        else if (config.style === "capital") {
            const [firstLetter, ...rest] = username.split("");
            username = firstLetter.toUpperCase() + rest.join("");
        }
        else if (config.style === "upperCase") {
            username = username.toUpperCase();
        }
        if (config.length) {
            return username.substring(0, config.length);
        }
        else {
            return username.substring(0, 15);
        }
    }
}
exports.uniqueUsernameGenerator = uniqueUsernameGenerator;
var data_2 = require("./data");
Object.defineProperty(exports, "adjectives", { enumerable: true, get: function () { return data_2.adjectives; } });
Object.defineProperty(exports, "nouns", { enumerable: true, get: function () { return data_2.nouns; } });
